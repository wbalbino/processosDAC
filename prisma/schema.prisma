// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


model Contact {
  id String @id @default(cuid())
  name String
  email String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  password String
  email String @unique
  fullName String @map("full_name")
  role String?
  department String?
  avatarUrl String? @map("avatar_url")
  recoveryKey String? @map("recovery_key")
  recoveryKeyExpires DateTime? @map("recovery_key_expires")
}

model Process {
  id Int @id @default(autoincrement())
  avatar String? @map("avatar")
  nomeProcesso String @map("nome_processo")
  nomeSubprocesso String? @map("nome_subprocesso")
  nivel String @map("nivel") // Graduação, Pós-Graduação Strict Sensu, Pós-Graduação Latu Sensu
  area String @map("area") // DIA, DGVA, Atendimento, TI
  responsavel String @map("responsavel")
  coResponsavel String[] @map("co_responsavel")
  classificacao String @map("classificacao") // estratégico, negócio, suporte
  informatizacao String @map("informatizacao") // completo, parcial, pouco/nada
  descentralizacao String @map("descentralizacao") // totalmente, parcialmente, centralizado
  planoRisco String @map("plano_risco")
  maturidade String @map("maturidade")
  descricao String @map("descricao")
  atores String @map("atores")
  priorizacao String @map("priorizacao")
  periodicidade String @map("periodicidade") // Diário, semanal, semestral, anual, sazonal
  desenhoProcesso String? @map("desenho_processo")
  catalogoServico String? @map("catalogo_servico")
  indicadorDesempenho String @map("indicador_desempenho")
  quantidadeAtividades Int @map("quantidade_atividades")
  complexidade String @map("complexidade")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdBy Int @map("created_by")
  history ProcessHistory[]
}

model AiAssistance {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  processId Int? @map("process_id")
  query String
  response String
  timestamp DateTime @default(now())
}

model ProcessHistory {
  id Int @id @default(autoincrement())
  processId Int @map("process_id")
  userId Int @map("user_id")
  description String
  timestamp DateTime @default(now())
  process Process @relation(fields: [processId], references: [id])
}